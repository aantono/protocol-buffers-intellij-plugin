package ws.antonov.idea.plugin.protobuf.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ws.antonov.idea.plugin.protobuf.lexer.ProtoTokenTypes;

%%

%class _ProtobufLexer
%public
%implements ProtoTokenTypes, FlexLexer
%unicode
%function advance
%type IElementType
%eof{  return;
%eof}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// User code //////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

%{
    public _ProtobufLexer(boolean highlightMode) {
      this((java.io.Reader)null);
      isHighlightModeOn = highlightMode;
    }

    private boolean isHighlightModeOn = false;

%}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// NewLines and spaces /////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

mNL = \r | \n | \r\n                                    // NewLines
mWS = " " | "," | \t | \f | {mNL}                       // Whitespaces

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Parens, Squares, Curleys, Quotes /////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

mLP = "("
mRP = ")"
mLS = "["
mRS = "]"
mLC = "{"
mRC = "}"

mSEMICOLON = ";"
mEQUALS = "="
//mQUOTE = "'"
//mBACKQUOTE = "`"
//mPOUNDUP = {mPOUND} {mUP}
//mUP = "^"
//mPOUND = "#"
//mPERCENT = "%"
//mTILDA = "~"
//mAT = "@"
//mTILDAAT = {mTILDA} {mAT}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Strings ////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//mHEX_DIGIT = [0-9A-Fa-f]

//mSTRING_ESC = \\ n | \\ r | \\ t | \\ b | \\ f | "\\" "\\" | \\ \" | \\ \'
//| "\\""u"{mHEX_DIGIT}{4}
//| "\\" [0..3] ([0..7] ([0..7])?)?
//| "\\" [4..7] ([0..7])?
//| "\\" {mNL}

//mSTRING = \"
//    ( {mSTRING_ESC}
//        | "\""
//        | [^\\\'\r\n]
//    )* \"

mSTRING = \" [^\"]* \"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Comments ////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

mLINE_COMMENT = "//" [^\r\n]* {mNL}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////      integers and floats     /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

mDIGIT = [0-9]

// Integer
mINTEGER = {mDIGIT}+

//Float
mFLOAT = {mDIGIT}+ "." {mDIGIT}+

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////      boolean     /////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

mBOOLEAN = "true" | "false"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////      identifiers      ////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

mLETTER = [A-Z] | [a-z]
mSLASH_LETTER = \\ ({mLETTER} | .)

// | \\ r | \\ t | \\ b | \\ f | "\\" "\\" | \\ \" | \\ \'
//                   | "\\""u"{mHEX_DIGIT}{4}
//                   | "\\" [0..3] ([0..7] ([0..7])?)?
//                   | "\\" [4..7] ([0..7])?
//                   | "\\" {mNL}

//TODO:  Double-check on what's allowed
mOTHER = "_" | "-" | "*" | "." | "+" | "&" | "<" | ">" | "$" | "/" | "?" | "!"

mNoDigit = ({mLETTER} | {mOTHER} | {mSLASH_LETTER})
mIDENT = {mNoDigit} ({mNoDigit} | {mDIGIT})*
//mKEY = "=" ("" | [" "]*) {mIDENT}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////      predefined      ////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//mT = 't' | 'T'
//mNIL = "nil" | "NIL"

mPACKAGE = "package"
mOPTION = "option"
mOBJECT = "message" | "enum" | "extend"
mFIELD = "required" | "optional" | "repeated"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////  states ///////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

%%
<YYINITIAL>{

  {mLINE_COMMENT}                           {  return COMMENT; }

  {mWS}+                                    {  return WHITE_SPACE; }

  {mINTEGER}                                {  return NUMERIC_LITERAL; }
  {mFLOAT}                                  {  return NUMERIC_LITERAL; }
  {mBOOLEAN}                                {  return BOOLEAN_LITERAL; }
  {mPACKAGE}                                {  return PACKAGE; }
  {mOPTION}                                 {  return OPTION; }
  {mFIELD}                                  {  return FIELD_DEF; }
  {mOBJECT}                                 {  return OBJECT_DEF; }
//  {mT}                                      {  return T; }
//  {mNIL}                                    {  return NIL; }
  {mIDENT}                                  {  return KEY; }
//  {mKEY}                                    {  return EQUALS; }

  {mEQUALS}                                 { return EQUALS; }
  {mSEMICOLON}                              { return SEMICOLON; }
//  {mQUOTE}                                  {  return QUOTE; }
//  {mBACKQUOTE}                              {  return BACKQUOTE; }
//  {mPOUND}                                  {  return POUND; }
//  {mUP}                                     {  return UP; }
//  {mPOUNDUP}                                {  return POUNDUP; }
//  {mPERCENT}                                {  return PERCENT; }
//  {mTILDA}                                  {  return TILDA; }
//  {mAT}                                     {  return AT; }
//  {mTILDAAT}                                {  return TILDAAT; }


  {mLP}                                     {  return LEFT_PAREN; }
  {mRP}                                     {  return RIGHT_PAREN; }
  {mLS}                                     {  return LEFT_BRACKET; }
  {mRS}                                     {  return RIGHT_BRACKET; }
  {mLC}                                     {  return LEFT_CURLY; }
  {mRC}                                     {  return RIGHT_CURLY; }

  {mSTRING}                                 {  return STRING_LITERAL; }

}

// Anything else is should be marked as a bad char
.                                {  return BAD_CHARACTER; }

